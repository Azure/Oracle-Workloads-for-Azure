[CmdletBinding()]
Param(
    [Parameter()]
    [Alias("h")]
    [switch]$Help,

    [Parameter(mandatory=$false)]
    [string]$SourceFolder=".\",

    [Parameter(mandatory=$false)]
    [string]$OutputFile="",

    [Parameter(mandatory=$false)]
    [string]$AzureRegion="westus"

    )
        
    
######################################### Utility Functions #########################################
function FirstLineOffset {
    param (
        $htmlTable
    )
    $headerOffset=0
    :rowLoop for($i=0;$i -lt $htmlTable.rows.length;$i++)
    {
        $headerTagFound=$false
        :cellLoop for($j=0;$j -lt $htmlTable.rows[$i].cells.length;$j++)
        {
            if($htmlTable.rows[$i].cells[$j].tagName -ieq "TH") 
            {
                $headerTagFound=$true
                break cellLoop
            }
        }
        if ($headerTagFound -eq $false)
        {
            $headerOffset=$i
            break rowLoop
        }
    }
    return $headerOffset
}
function ConverNumberOrDefault {
    param (
        [string]$textToConvert,
        [decimal]$defaultValue
    )
    [decimal]$parsedNumber=0
    [bool]$result=[decimal]::TryParse($textToConvert, [ref]$parsedNumber)
    if($result -eq $true)
    {
        return $parsedNumber
    }
    else {
        return $defaultValue
    }
    
}

function ResetTable([object]$listObject){
    $ws = $listObject.Parent
    $startRow=$listObject.DataBodyRange.Rows(2).Row
    $endRow=$listObject.DataBodyRange.Rows($listObject.DataBodyRange.Rows.Count).Row
    $rowAddress="$($startRow):$($endRow)"
    $ws.Rows($rowAddress).Delete([Microsoft.Office.Interop.Excel.XlDeleteShiftDirection]::xlShiftUp)
}

function InsertEntireRowAtTheEnd([object]$listObject){
    $listObject.ListRows.Item($listObject.ListRows.Count).Range.Offset(1).EntireRow.Insert() | Out-Null
    if($listObject.ShowTotals -eq $False){$listObject.Resize($listObject.Range.Resize($listObject.Range.CurrentRegion.Rows.Count))}
    for($colIndex=1;$colIndex -le $listObject.ListColumns.Count;$colIndex++)
    {
        $range=$listObject.DataBodyRange.Item($listObject.ListRows.Count,$colIndex)
        $range.Interior.Pattern = [Microsoft.Office.Interop.Excel.XlPattern]::xlPatternNone
        $range.Interior.PatternColorIndex = [Microsoft.Office.Interop.Excel.XlColorIndex]::xlColorIndexNone
    }
}

function PutExcelTableHeader (){
    param (
        [object]$ws,
        [int]$rownum,
        [int]$colnum,
        [string]$header
    )
    try {
        $ws.cells($rownum,$colnum).Font.Size = 14
        $ws.cells($rownum,$colnum).Font.Bold = $true
        
        $ws.cells.item($rownum,$colnum) = $header
        }
    catch {
        Write.Debug $_
    }
    }

######################################### Process AWR Report #########################################
<#
.SYNOPSIS
 Process a single AWR Report file.

.DESCRIPTION
Processes a given AWR report file in HTML format, extracts information and appends it into a global array (awrDataAll)

.PARAMETER awrReportFileName
Full path to AWR report file to be processed.

.EXAMPLE
ProcessAWRReport -awrReportFileName $_.FullName

#>
function ProcessAWRReport {
    param (
        [string]$awrReportFileName
    )
    
    Write-Host "$($global:numProcessedFiles+1)-Processing file : $awrReportFileName"

    try {

        Write-Debug "Creating HTML DOM object..."
        $html = New-Object -ComObject "HTMLFile"

        Write-Debug "Opening HTML file ($awrReportFileName) ..."
        $source = Get-Content -Path $awrReportFileName -Raw

        Write-Debug "Loading DOM document ..."
        $html.IHTMLDocument2_write($source)

        $htmlHeader=$html.body.getElementsByTagName('h1')

        if ($htmlHeader)
        {
            if ($htmlHeader[0].InnerText.Trim() -ne $global:RACReportTitle)
            {
                throw "This file ($awrReportFileName) does not seem to be a Global (RAC) AWR report generated by awrgrpt.sql. The report should read `"$global:RACReportTitle`" at the top."
            }
        }
        else {
            throw "This file ($awrReportFileName) does not seem to be a Global (RAC) AWR report generated by awrgrpt.sql. The report should have an <h1> tag that reads `"$global:RACReportTitle`" at the top."
        }

        $tblDBSummary=$html.body.getElementsByTagName('table') | Where {$_.summary -like 'Database Summary'} 

        if ($tblDBSummary)
        {
            $databaseName=$tblDBSummary.rows[2].cells[1].InnerText 
        }
        else {
            throw "HTML table cannot be found summary=`"Database Summary`" while processing file `"$awrReportFileName`""
        }

        [array]$awrData=$html.body.getElementsByTagName('table') | Where {$_.summary -like 'Database Instances Included In Report*'} | ForEach-Object {$_.rows} | where {$_.cells[0].tagName -ne "TH"} |
        ForEach-Object {
            $objectProps=[ordered]@{
                InstanceIndex=ConverNumberOrDefault $_.cells[0].InnerText 0 
                Release      =$_.cells[6].InnerText 
                DBName       =$databaseName
                InstanceName =$_.cells[1].InnerText 
                HostName     =$_.cells[2].InnerText 
                ElapsedTime  =ConverNumberOrDefault $_.cells[7].InnerText 0  
                DBTime       =ConverNumberOrDefault $_.cells[8].InnerText 0 
                DBCPU        =0
                CPUs         =0
                Cores        =0
                Memory       =0
                BusyCPU      =0
                SGAUse       =0
                PGAUse       =0
                ReadThroughput  =0
                WriteThroughput =0
                ReadIOPS        =0
                WriteIOPS       =0
                TotalThroughput =0
                TotalIOPS       =0
                CPUTotalCapacity=0
                ORAUse          =0
                SourceCPUHTFactor=0
                AverageActiveSessions=0
                AWRReportFileName=$awrReportFileName
            }
            New-Object -TypeName PSCustomObject -Property $objectProps #this is to provide ordered list of object properties
        }

        if (-not ($awrData))
        {
            throw "HTML table cannot be found summary=`"Database Instances Included In Report*`" while processing file `"$awrReportFileName`""
        }

        try {
            
        #If we made it here file is processed at least partially. Try block/finally makes sure whatever is extracted from AWR report is appended into global report

        $tblTimeModel=$html.body.getElementsByTagName('table') | Where {$_.summary -like 'Time Model*'} 

        if ($tblTimeModel)
        {
            $offset=FirstLineOffset($tblTimeModel)

            for($i=0;$i -lt $awrData.Length;$i++)
            {
                $awrData[$i].DBCPU=ConverNumberOrDefault $tblTimeModel.rows[$i+$offset].cells[2].InnerText 0 
            }
        }
        else {
            Write-Host "HTML table cannot be found summary=`"Time Model*`" while processing file `"$awrReportFileName`""
        }

        $tblOSStatistics=$html.body.getElementsByTagName('table') | Where {$_.summary -like 'OS Statistics By Instance*'} 

        if ($tblOSStatistics)
        {
            $offset=FirstLineOffset($tblOSStatistics)

            for($i=0;$i -lt $awrData.Length;$i++)
            {
                $awrData[$i].CPUs   =ConverNumberOrDefault $tblOSStatistics.rows[$i+$offset].cells[ 1].InnerText 0 
                $awrData[$i].Cores  =ConverNumberOrDefault $tblOSStatistics.rows[$i+$offset].cells[ 2].InnerText 0 
                $awrData[$i].Memory =ConverNumberOrDefault $tblOSStatistics.rows[$i+$offset].cells[14].InnerText 0 
                $awrData[$i].busyCPU=ConverNumberOrDefault $tblOSStatistics.rows[$i+$offset].cells[ 6].InnerText 0 
            }
        
        }
        else {
            Write-Host "HTML table cannot be found summary=`"OS Statistics By Instance*`" while processing file `"$awrReportFileName`""
        }

        $tblCacheSizes=$html.body.getElementsByTagName('table') | Where {$_.summary -like 'Cache Sizes*'} 
        if ($tblCacheSizes)
        {
            $offset=FirstLineOffset($tblCacheSizes)

            for($i=0;$i -lt $awrData.Length;$i++)
            {
                $begin=ConverNumberOrDefault $tblCacheSizes.rows[$i+$offset].cells[3].InnerText 0 
                $end  =ConverNumberOrDefault $tblCacheSizes.rows[$i+$offset].cells[4].InnerText 0 
                $awrData[$i].SGAuse=[Math]::Max($begin, $end)

                $begin=ConverNumberOrDefault $tblCacheSizes.rows[$i+$offset].cells[15].InnerText 0 
                $end  =ConverNumberOrDefault $tblCacheSizes.rows[$i+$offset].cells[16].InnerText 0 
                $awrData[$i].PGAuse=[Math]::Max($begin, $end)
            }
        }
        else {
            Write-Host "HTML table cannot be found summary=`"Cache Sizes*`" while processing file `"$awrReportFileName`""
        }


        $tblIOStatByFileType=$html.body.getElementsByTagName('table') | Where {$_.summary -like 'IOStat by File Type*'} 

        if ($tblIOStatByFileType)
        {
            $release=$awrData[0].Release

            if($release -like "19*")
            {
                for($i=0;$i -lt $awrData.Length;$i++)
                {
                    $currentInstance=-1
                    $rowIndex=-1
                    for($j=0;$j -lt $tblIOStatByFileType.rows.length; $j++)
                    {
                        $currentInstance=ConverNumberOrDefault $tblIOStatByFileType.rows[$j].cells[0].InnerText -1
                        if ($currentInstance -eq $awrData[$i].InstanceIndex)
                        {
                            $rowIndex=$j
                            break
                        }
            
                    }
            
                    if ($rowIndex -gt -1)
                    {
                        $awrData[$i].ReadThroughput =ConverNumberOrDefault $tblIOStatByFileType.rows[$rowIndex].cells[4].InnerText 0 
                        $awrData[$i].WriteThroughput=ConverNumberOrDefault $tblIOStatByFileType.rows[$rowIndex].cells[5].InnerText 0 
                        $awrData[$i].ReadIOPS       =ConverNumberOrDefault $tblIOStatByFileType.rows[$rowIndex].cells[8].InnerText 0 
                        $awrData[$i].WriteIOPS      =ConverNumberOrDefault $tblIOStatByFileType.rows[$rowIndex].cells[9].InnerText 0 
                    }
                }
            }
            else
            {
                $offset=FirstLineOffset($tblIOStatByFileType)

                for($i=0;$i -lt $awrData.Length;$i++)
                {
                    $awrData[$i].ReadThroughput=ConverNumberOrDefault $tblIOStatByFileType.rows[$i+$offset].cells[1].InnerText 0 
                    if ($awrData[$i].ReadThroughput -eq 0){$awrData[$i].ReadThroughput=(ConverNumberOrDefault $tblIOStatByFileType.rows[$i+$offset].cells[2].InnerText 0)+(ConverNumberOrDefault $tblIOStatByFileType.rows[$i+$offset].cells[3].InnerText 0)}
                    $awrData[$i].WriteThroughput=ConverNumberOrDefault $tblIOStatByFileType.rows[$i+$offset].cells[4].InnerText 0 
                    if ($awrData[$i].WriteThroughput -eq 0){$awrData[$i].WriteThroughput=(ConverNumberOrDefault $tblIOStatByFileType.rows[$i+$offset].cells[5].InnerText 0)+(ConverNumberOrDefault $tblIOStatByFileType.rows[$i+$offset].cells[6].InnerText 0)+(ConverNumberOrDefault $tblIOStatByFileType.rows[$i+$offset].cells[7].InnerText 0)}
                    $awrData[$i].ReadIOPS=ConverNumberOrDefault $tblIOStatByFileType.rows[$i+$offset].cells[8].InnerText 0 
                    if ($awrData[$i].ReadIOPS -eq 0){$awrData[$i].ReadIOPS=(ConverNumberOrDefault $tblIOStatByFileType.rows[$i+$offset].cells[9].InnerText 0)+(ConverNumberOrDefault $tblIOStatByFileType.rows[$i+$offset].cells[10].InnerText 0)}
                    $awrData[$i].WriteIOPS=ConverNumberOrDefault $tblIOStatByFileType.rows[$i+$offset].cells[11].InnerText 0 
                    if ($awrData[$i].WriteIOPS -eq 0)
                    {
                        $awrData[$i].WriteIOPS=(ConverNumberOrDefault $tblIOStatByFileType.rows[$i+$offset].cells[12].InnerText 0)+(ConverNumberOrDefault $tblIOStatByFileType.rows[$i+$offset].cells[13].InnerText 0)+(ConverNumberOrDefault $tblIOStatByFileType.rows[$i+$offset].cells[14].InnerText 0)
                    }
                }
            }
        }
        else {
            Write-Host "HTML table cannot be found summary=`"IOStat by File Type*`" while processing file `"$awrReportFileName`""
        }

        Write-Debug "awrData contains $($awrData.Length) element(s)"
        Write-Debug ($awrData | Format-Table | Out-String)
    }
    finally {
        #append to global array
        $global:numProcessedFiles++
        $global:awrDataAll +=  $awrData  
    }
    }
    catch {
        Write-Host "Error processing file `"$awrReportFileName`":"
        Write-Host ($_ | out-string)
    }
    finally{
        Write-Debug "Releasing DOM object..."
        [System.Runtime.Interopservices.Marshal]::ReleaseComObject($html) | Out-Null
    }
}


######################################### Generate Recommendations #########################################
<#
.SYNOPSIS
Generates VM recommendations on Azure

.DESCRIPTION
Receives target vCPU and RAM requirements and generates possible alternatives for VM SKUs on Azure.

.PARAMETER estimatedvCPU
Number of vCPUs estimated on Azure.

.PARAMETER estimatedRAM
Amount of memory in GB estimated on Azure.

.EXAMPLE

#>
function GenerateRecommendations([decimal]$estimatedvCPU, [decimal]$estimatedRAM, [decimal]$estimatedIOPS, [decimal]$estimatedIOThroughput){
    Write-Host "Generating recommendations ..."
    Write-Debug "Fetching available Azure VM SKUs in $AzureRegion ..."
    try{
    
    # Problem is that JSON reurned from "az vm list-skus" call can include two attributes with the same name but diferent casing: "locationInfo.zoneDetails.Name" and 
    # "locationInfo.zoneDetails.name". Therefore "ConvertFrom-Json" raises an error. In order to solve this problem properly, "-AsHashtable" parameter is provided for 
    # "ConvertFrom-Json".
    # However "-AsHashTable" parameter works only for PowerShell v6 and above. At the moment, we do not need the "Name" attribute in JSON anyway. 
    # Implemented a workaround so that instead of calling "ConvertFrom-Json" with "-AsHashtable" attribute, we'll just rename the attribute from "Name" to "_Name"
    # This workaround will also remove the need to upgrade PowerShell installation. 
    # Original Code: $json=az vm list-skus --all --location $AzureRegion | ConvertFrom-Json -AsHashtable
    $stemp=az vm list-skus --all --location $AzureRegion 
    $stemp=$stemp -creplace "`"Name`"","`"_Name`""
    $json= $stemp | ConvertFrom-Json
    # workaround ends here


    $azureSkus = $json | ForEach-Object {
        $objectProps=[ordered]@{
            name = $_.name
            size = $_.size
            tier = $_.tier
            family=$_.family
            resourceType=$_.resourceType
        } 
        $obj = New-Object -TypeName PSCustomObject -Property $objectProps
        $_.capabilities | where {-not [string]::IsNullOrEmpty($_.name)} | ForEach-Object {
            add-member -InputObject $obj -MemberType NoteProperty -Name $_.name -Value $_.value
        }
        return $obj
    } 
    
    $azureVMSkus   = $azureSkus | where {$_.resourceType -eq "virtualMachines"} | Select-Object *, 
                @{N='tmp_vCPUs';E={if([string]::IsNullOrEmpty($_.vCPUsAvailable)){[decimal]::Parse($_.vCPUs)}else{[decimal]::Parse($_.vCPUsAvailable)}}}, 
                @{N='tmp_MemoryGB';E={[decimal]::Parse($_.MemoryGB)}}, 
                @{N='tmp_vCPUsPerCore';E={if([string]::IsNullOrEmpty($_.vCPUsPerCore)){2}else{[decimal]::Parse($_.vCPUsPerCore)}}} 

    [array]$global:azureVMRecommendations = $null

    Write-Debug "Filtering lower VM SKUs by vCPU."
    try{
        [array]$tmpresult = $azureVMSkus | where { ($_.tmp_vCPUs -ge $estimatedvCPU*0.7) -and ($_.tmp_vCPUs -le $estimatedvCPU) -and ($_.MemoryGB -ge $estimatedRAM*0.7) }
    }
    catch {
        Write-Host "Error generating recommendations."
        Write-Host ($_ | out-string)
    }
    if($null -ne $tmpresult){$global:azureVMRecommendations = $tmpResult}
    Write-Debug "Current # of recommendations:$($global:azureVMRecommendations.Length)"

    Write-Debug "Filtering higher VM SKUs by vCPU."
    try{
        [array]$bottomvCPUs=$azureVMSkus | select -Property tmp_vCPUs -Unique | where { ($_.tmp_vCPUs    -ge $estimatedvCPU)} | Sort-Object -Property tmp_vCPUs  | Select -ExpandProperty tmp_vCPUs -First 1
        [array]$tmpresult  = $azureVMSkus | where { ($_.tmp_vCPUs    -in $bottomvCPUs) }
    }
    catch {
        Write-Host "Error generating recommendations."
        Write-Host ($_ | out-string)
    }
    if($null -ne $tmpresult){$global:azureVMRecommendations += $tmpResult}
    Write-Debug "Current # of recommendations:$($global:azureVMRecommendations.Length)"
    
    Write-Debug "Filtering VM SKUs by RAM."
    try{
        [array]$tmpResult = $global:azureVMRecommendations | where { ($_.tmp_MemoryGB -ge $estimatedRAM*0.9) }
    }
    catch {
        Write-Host "Error generating recommendations."
        Write-Host ($_ | out-string)
    }
    if($null -ne $tmpresult){$global:azureVMRecommendations = $tmpResult}
    Write-Debug "Current # of recommendations:$($global:azureVMRecommendations.Length)"

    Write-Debug "Filtering VM SKUs by Family (D, E and M series)."
    try{
        [array]$tmpResult = $global:azureVMRecommendations | where { $_.family -like 'StandardD*' -or $_.family -like 'StandardE*' -or $_.family -like 'StandardM*' }
    }
    catch {
        Write-Host "Error generating recommendations."
        Write-Host ($_ | out-string)
    }
    if($null -ne $tmpresult){$global:azureVMRecommendations = $tmpResult}
    Write-Debug "Current # of recommendations:$($global:azureVMRecommendations.Length)"

    Write-Debug "Filtering VM SKUs that don't support premium disks."
    try{
        [array]$tmpResult = $global:azureVMRecommendations | where { $_.PremiumIO -eq 'True' }
    }
    catch {
        Write-Host "Error generating recommendations."
        Write-Host ($_ | out-string)
    }
    if($null -ne $tmpresult){$global:azureVMRecommendations = $tmpResult}
    Write-Debug "Current # of recommendations:$($global:azureVMRecommendations.Length)"

    Write-Debug "Filtering VM SKUs that don't support ultra disks."
    try{
        [array]$tmpResult = $global:azureVMRecommendations | where { $_.UltraSSDAvailable -eq 'True' }
    }
    catch {
        Write-Host "Error generating recommendations."
        Write-Host ($_ | out-string)
    }
    if($null -ne $tmpresult){$global:azureVMRecommendations = $tmpResult}
    Write-Debug "Current # of recommendations:$($global:azureVMRecommendations.Length)"

    Write-Debug "Filtering VM SKUs that don't use HT."
    try{
        [array]$tmpResult = $global:azureVMRecommendations | where { $_.tmp_vCPUsPerCore -gt 1 }
    }
    catch {
        Write-Host "Error generating recommendations."
        Write-Host ($_ | out-string)
    }
    if($null -ne $tmpresult){$global:azureVMRecommendations = $tmpResult}
    Write-Debug "Current # of recommendations:$($global:azureVMRecommendations.Length)"

    Write-Debug "Filtering VM SKUs that don't support accelerated networking."
    try{
        [array]$tmpResult = $global:azureVMRecommendations | where { $_.AcceleratedNetworkingEnabled -eq 'True'}
    }
    catch {
        Write-Host "Error generating recommendations."
        Write-Host ($_ | out-string)
    }
    if($null -ne $tmpresult){$global:azureVMRecommendations = $tmpResult}
    Write-Debug "Current # of recommendations:$($global:azureVMRecommendations.Length)"

    $azureDiskSkus = $azureSkus | where {$_.resourceType -eq "disks"}
    }
    catch {
        Write-Host "Error generating recommendations."
        Write-Host ($_ | out-string)
    }
}

######################################### Export to Excel #########################################
<#
.SYNOPSIS
Export data to Excel

.DESCRIPTION
Export data that was collected into the global array (awrDataAll) to an excel file. Also generates Azure VM SKU recommendations and exports them into the same Excel file.

#>
function ExportToExcel(){
    Write-Host "Exporting to Excel..."
    Write-Debug "Starting Excel ..."
    $XL = New-Object -comobject Excel.Application

    if ($DebugPreference -eq "Continue")
    {
        $XL.Visible = $True;
    }
    else {
        $XL.DisplayAlerts = $false
    }
    
    
    try{

    Write-Debug "Creating workbook..."
    $wbOma = $XL.Workbooks.Add()
    Write-Debug "Creating worksheet (OMA)..."
    $wsOma = $wbOma.Worksheets.Item(1)
    $wsOma.Name="OMA"
    
    Write-Debug "Creating worksheet (Settings)..."
    $wsSettings = $wbOma.Worksheets.Add()
    $wsSettings.Name="Settings"

    if ($DebugPreference -eq "Continue"){$wsSettings.Activate() | Out-Null}

    $vCPUHTFactor = 2
    $peakRamFactor = 2
    $peakCPUFactor = 2
    $peakIOFactor = 2
    $busyCPUThreshold = 0.75
    $busyCPUFactor = 1.25

    Write-Debug "Populating settings table..."
    $rowi=1
    $coli=1
    $wsSettings.cells.item($rowi++,$coli)="Parameter Name"
    $wsSettings.cells.item($rowi++,$coli)="Est'd Peak CPU factor"
    $wsSettings.cells.item($rowi++,$coli)="Est'd Peak RAM factor"
    $wsSettings.cells.item($rowi++,$coli)="Est'd Peak I/O factor"
    $wsSettings.cells.item($rowi++,$coli)="vCPU HT multiplier"
    $wsSettings.cells.item($rowi++,$coli)="%Busy CPU-thrashing threshold"
    $wsSettings.cells.item($rowi++,$coli)="%Busy CPU-thrashing factor"

    $rowi=1
    $coli=2
    $wsSettings.cells.item($rowi,$coli)="Setting"; $rowi++;
    $wsSettings.cells.item($rowi,$coli)=$peakCPUFactor      ; $wsSettings.cells.item($rowi++,$coli).Name="peakCPUFactor";
    $wsSettings.cells.item($rowi,$coli)=$peakRamFactor      ; $wsSettings.cells.item($rowi++,$coli).Name="peakRamFactor";
    $wsSettings.cells.item($rowi,$coli)=$peakIOFactor       ; $wsSettings.cells.item($rowi++,$coli).Name="peakIOFactor";
    $wsSettings.cells.item($rowi,$coli)=$vCPUHTFactor       ; $wsSettings.cells.item($rowi++,$coli).Name="vCPUHTFactor";
    $wsSettings.cells.item($rowi,$coli)=$busyCPUThreshold   ; $wsSettings.cells.item($rowi++,$coli).Name="busyCPUThreshold";
    $wsSettings.cells.item($rowi,$coli)=$busyCPUFactor      ; $wsSettings.cells.item($rowi  ,$coli).Name="busyCPUFactor";

    Write-Debug "Formatting settings table..."
    $tblSettings=$wsSettings.ListObjects.Add(
        [Microsoft.Office.Interop.Excel.XlListObjectSourceType]::xlSrcRange, 
        $wsSettings.Range($wsSettings.cells(1,1),$wsSettings.cells($rowi  ,$coli)), 
        $null ,
        [Microsoft.Office.Interop.Excel.XlYesNoGuess]::xlYes)
    $tblSettings.Name = "SettingsTable"
    $tblSettings.ShowHeaders = $true
    $tblSettings.TableStyle = "TableStyleMedium9"
    $wsSettings.Columns(1).ColumnWidth = 30
    $wsSettings.Columns(2).ColumnWidth = 10

    if ($DebugPreference -eq "Continue"){$wsOma.Activate() | Out-Null}

    Write-Debug "Creating AWR table..."
    $tblStartCol=1
    $tblStartRow=1


    PutExcelTableHeader $wsOma $tblStartRow $tblStartCol "AWR Details"
    $tblStartRow++
    $tblAwr = $wsOma.ListObjects.Add(
        [Microsoft.Office.Interop.Excel.XlListObjectSourceType]::xlSrcRange, 
        $wsOma.Range($wsOma.cells($tblStartRow,$tblStartCol),$wsOma.cells($tblStartRow+1  ,$global:awrDataColumnDefinitions.Length+$tblStartCol-1)), 
        $null ,
        [Microsoft.Office.Interop.Excel.XlYesNoGuess]::xlYes)

    $tblAwr.Name = "AWRData"
    $tblAwr.ShowHeaders = $true
    $tblAwr.ShowTotals = $true
    $tblAwr.TableStyle = "TableStyleMedium9"
    

    Write-Debug "Formatting headers for AWR table..."
    for($i=0;$i -lt $global:awrDataColumnDefinitions.Length;$i++) {
        $tblAwr.HeaderRowRange.Item(1,$i+1) = $global:awrDataColumnDefinitions[$i].label
        if (-not [string]::IsNullOrEmpty($global:awrDataColumnDefinitions[$i].formula))
        {
            $tblAwr.DataBodyRange.Cells(1,$i+1).FormulaR1C1 = $global:awrDataColumnDefinitions[$i].formula
        }

        if ($global:awrDataColumnDefinitions[$i].columnWidth -ge 0)
        {
            $wsOma.Columns($tblAwr.HeaderRowRange.Item(1,$i+1).Column).ColumnWidth = $global:awrDataColumnDefinitions[$i].columnWidth
        }

    }

    Write-Debug "Populating AWR table..."
    for($i=0;$i -lt $global:awrDataAll.Length;$i++) {
        if($i -gt 0) {$tblAwr.ListRows.Add() | Out-Null}
        for($j=0;$j -lt $global:awrDataColumnDefinitions.Length;$j++) {
            if ([string]::IsNullOrEmpty($global:awrDataColumnDefinitions[$j].formula))
            {
                $value = $global:awrDataAll[$i]."$($global:awrDataColumnDefinitions[$j].columnName)"
                if($global:awrDataColumnDefinitions[$j].multiplyBy -gt 0){$value *= $global:awrDataColumnDefinitions[$j].multiplyBy}
                $tblAwr.DataBodyRange.Item($i+1,$j+1) = $value
            }
        }
    }
    
    Write-Debug "Configuring conditional formats..."
    $firstCellAddress =  $tblAwr.DataBodyRange.Cells(1,1).Address($false,$false)
    $formatCondition = $tblAwr.DataBodyRange.FormatConditions.Add(
        [Microsoft.Office.Interop.Excel.XlFormatConditionType]::xlExpression,
        $null,
        "=OR(ISBLANK($firstCellAddress),$firstCellAddress=0)") 

    $formatCondition.Interior.Pattern = [Microsoft.Office.Interop.Excel.XlPattern]::xlSolid 
    $formatCondition.Interior.PatternColorIndex = [Microsoft.Office.Interop.Excel.XlColorIndex]::xlColorIndexAutomatic 
    $formatCondition.Interior.Color = 8420607 

    Write-Debug "Formatting totals row for AWR table..."
    for($i=1;$i -le $tblAwr.ListColumns.Count;$i++) {
        switch ($global:awrDataColumnDefinitions[$i-1].totalRow)
        {
            "sum"       {$tblAwr.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationSum}
            "average"   {$tblAwr.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationAverage}	
            "count"     {$tblAwr.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationCount}	
            "countnums" {$tblAwr.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationCountNums}
            "max"       {$tblAwr.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationMax}	    
            "min"       {$tblAwr.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationMin}	    
            "stddev"    {$tblAwr.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationStdDev}	
            "var"       {$tblAwr.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationVar}            
        }
        if ( -not [string]::IsNullOrEmpty($global:awrDataColumnDefinitions[$i-1].format))
        {
        $tblAwr.DataBodyRange.Columns($i).NumberFormat = $global:awrDataColumnDefinitions[$i-1].format
        $tblAwr.TotalsRowRange.Columns($i).NumberFormat = $global:awrDataColumnDefinitions[$i-1].format
        }
    }



    ############################# Instance Summary #############################
    $tblStartRow=$tblAwr.ListRows.Item($tblAwr.ListRows.Count).Range.Offset(3).Row # Offset 3 rows: header row+total row+empty row

    PutExcelTableHeader $wsOma $tblStartRow $tblStartCol "Summary by Database Instance" 
    $tblStartRow++
 
    Write-Debug "Creating Instance Summary table..."
    $tblInstSummary = $wsOma.ListObjects.Add(
        [Microsoft.Office.Interop.Excel.XlListObjectSourceType]::xlSrcRange, 
        $wsOma.Range($wsOma.cells($tblStartRow,$tblStartCol),$wsOma.cells($tblStartRow+1  ,$global:instanceSummaryColumnDefinitions.Length+$tblStartCol-1)), 
        $null ,
        [Microsoft.Office.Interop.Excel.XlYesNoGuess]::xlYes)

    $tblInstSummary.Name = "InstSummary"
    $tblInstSummary.ShowHeaders = $true
    $tblInstSummary.ShowTotals = $true
    $tblInstSummary.TableStyle = "TableStyleMedium9"

    Write-Debug "Formatting headers for Instance Summary table..."
    for($i=0;$i -lt $global:instanceSummaryColumnDefinitions.Length;$i++) {
        $tblInstSummary.HeaderRowRange.Item(1,$i+1) = $global:instanceSummaryColumnDefinitions[$i].label
        if (-not [string]::IsNullOrEmpty($global:instanceSummaryColumnDefinitions[$i].formula))
        {
            $tblInstSummary.DataBodyRange.Cells(1,$i+1).FormulaR1C1 = $global:instanceSummaryColumnDefinitions[$i].formula
        }
        if ($global:instanceSummaryColumnDefinitions[$i].columnWidth -ge 0)
        {
            $wsOma.Columns($tblInstSummary.HeaderRowRange.Item(1,$i+1).Column).ColumnWidth = $global:instanceSummaryColumnDefinitions[$i].columnWidth
        }

    }

    Write-Debug "Populating Instance Summary table..."
    [array]$instSummaryData = $global:awrDataAll | Select-Object DBName,InstanceName -Unique

    for($i=0;$i -lt $instSummaryData.Length;$i++) {
        if($i -gt 0) {$tblInstSummary.ListRows.Add() | Out-Null}
        for($j=0;$j -lt $global:instanceSummaryColumnDefinitions.Length;$j++) {
            if ([string]::IsNullOrEmpty($global:instanceSummaryColumnDefinitions[$j].formula))
            {
                $tblInstSummary.DataBodyRange.Item($i+1,$j+1) = $instSummaryData[$i]."$($global:instanceSummaryColumnDefinitions[$j].columnName)"
            }
        }
    }

    Write-Debug "Formatting totals row Instance Summary table..."
    for($i=1;$i -le $tblInstSummary.ListColumns.Count;$i++) {
        switch ($global:instanceSummaryColumnDefinitions[$i-1].totalRow)
        {
            "sum"       {$tblInstSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationSum}
            "average"   {$tblInstSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationAverage}	
            "count"     {$tblInstSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationCount}	
            "countnums" {$tblInstSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationCountNums}
            "max"       {$tblInstSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationMax}	    
            "min"       {$tblInstSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationMin}	    
            "stddev"    {$tblInstSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationStdDev}	
            "var"       {$tblInstSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationVar}            
        }
        if ( -not [string]::IsNullOrEmpty($global:instanceSummaryColumnDefinitions[$i-1].format))
        {
        $tblInstSummary.DataBodyRange.Columns($i).NumberFormat = $global:instanceSummaryColumnDefinitions[$i-1].format
        $tblInstSummary.TotalsRowRange.Columns($i).NumberFormat = $global:instanceSummaryColumnDefinitions[$i-1].format
        }
    }

    ############################# Host Summary #############################
    $tblStartRow=$tblInstSummary.ListRows.Item($tblInstSummary.ListRows.Count).Range.Offset(3).Row # Offset 3 rows: header row+total row+empty row
    PutExcelTableHeader $wsOma $tblStartRow $tblStartCol "Summary by Host Server"
    $tblStartRow++

    Write-Debug "Creating Host Summary table..."
    $tblHostSummary = $wsOma.ListObjects.Add(
        [Microsoft.Office.Interop.Excel.XlListObjectSourceType]::xlSrcRange, 
        $wsOma.Range($wsOma.cells($tblStartRow,$tblStartCol),$wsOma.cells($tblStartRow+1  ,$global:hostSummaryColumnDefinitions.Length+$tblStartCol-1)), 
        $null ,
        [Microsoft.Office.Interop.Excel.XlYesNoGuess]::xlYes)

    $tblHostSummary.Name = "HostSummary"
    $tblHostSummary.ShowHeaders = $true
    $tblHostSummary.ShowTotals = $true
    $tblHostSummary.TableStyle = "TableStyleMedium9"

    Write-Debug "Formatting headers for Host Summary table..."
    for($i=0;$i -lt $global:hostSummaryColumnDefinitions.Length;$i++) {
        $tblHostSummary.HeaderRowRange.Item(1,$i+1) = $global:hostSummaryColumnDefinitions[$i].label
        if (-not [string]::IsNullOrEmpty($global:hostSummaryColumnDefinitions[$i].formula))
        {
            $tblHostSummary.DataBodyRange.Cells(1,$i+1).FormulaR1C1 = $global:hostSummaryColumnDefinitions[$i].formula
        }
        if ($global:hostSummaryColumnDefinitions[$i].columnWidth -ge 0)
        {
            $wsOma.Columns($tblHostSummary.HeaderRowRange.Item(1,$i+1).Column).ColumnWidth = $global:hostSummaryColumnDefinitions[$i].columnWidth
        }

    }

    Write-Debug "Populating for Host Summary table..."
    [array]$hostSummaryData = $global:awrDataAll | Select-Object HostName -Unique

    for($i=0;$i -lt $hostSummaryData.Length;$i++) {
        if($i -gt 0) {$tblHostSummary.ListRows.Add() | Out-Null}
        for($j=0;$j -lt $global:hostSummaryColumnDefinitions.Length;$j++) {
            if ([string]::IsNullOrEmpty($global:hostSummaryColumnDefinitions[$j].formula))
            {
                $tblHostSummary.DataBodyRange.Item($i+1,$j+1) = $hostSummaryData[$i]."$($global:hostSummaryColumnDefinitions[$j].columnName)"
            }
        }
    }
   
    Write-Debug "Formatting totals row for Host Summary table..."
    for($i=1;$i -le $tblHostSummary.ListColumns.Count;$i++) {
        switch ($global:hostSummaryColumnDefinitions[$i-1].totalRow)
        {
            "sum"       {$tblHostSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationSum}
            "average"   {$tblHostSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationAverage}	
            "count"     {$tblHostSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationCount}	
            "countnums" {$tblHostSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationCountNums}
            "max"       {$tblHostSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationMax}	    
            "min"       {$tblHostSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationMin}	    
            "stddev"    {$tblHostSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationStdDev}	
            "var"       {$tblHostSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationVar}            
        }

        if ( -not [string]::IsNullOrEmpty($global:hostSummaryColumnDefinitions[$i-1].format))
        {
        $tblHostSummary.DataBodyRange.Columns($i).NumberFormat = $global:hostSummaryColumnDefinitions[$i-1].format
        $tblHostSummary.TotalsRowRange.Columns($i).NumberFormat = $global:hostSummaryColumnDefinitions[$i-1].format
        }
    }

    ############################# DB Summary #############################
    $tblStartRow=$tblHostSummary.ListRows.Item($tblHostSummary.ListRows.Count).Range.Offset(3).Row # Offset 3 rows: header row+total row+empty row
    PutExcelTableHeader $wsOma $tblStartRow $tblStartCol "Summary by Database"
    $tblStartRow++

    Write-Debug "Creating DB Summary table..."
    $tblDBSummary = $wsOma.ListObjects.Add(
        [Microsoft.Office.Interop.Excel.XlListObjectSourceType]::xlSrcRange, 
        $wsOma.Range($wsOma.cells($tblStartRow,$tblStartCol),$wsOma.cells($tblStartRow+1  ,$global:dbSummaryColumnDefinitions.Length+$tblStartCol-1)), 
        $null ,
        [Microsoft.Office.Interop.Excel.XlYesNoGuess]::xlYes)

    $tblDBSummary.Name = "DBSummary"
    $tblDBSummary.ShowHeaders = $true
    $tblDBSummary.ShowTotals = $true
    $tblDBSummary.TableStyle = "TableStyleMedium9"

    Write-Debug "Formatting headers for DB Summary table..."
    for($i=0;$i -lt $global:dbSummaryColumnDefinitions.Length;$i++) {
        $tblDBSummary.HeaderRowRange.Item(1,$i+1) = $global:dbSummaryColumnDefinitions[$i].label
        if (-not [string]::IsNullOrEmpty($global:dbSummaryColumnDefinitions[$i].formula))
        {
            $tblDBSummary.DataBodyRange.Cells(1,$i+1).FormulaR1C1 = $global:dbSummaryColumnDefinitions[$i].formula
        }
        if ($global:dbSummaryColumnDefinitions[$i].columnWidth -ge 0)
        {
            $wsOma.Columns($tblDBSummary.HeaderRowRange.Item(1,$i+1).Column).ColumnWidth = $global:dbSummaryColumnDefinitions[$i].columnWidth
        }

    }

    Write-Debug "Populating DB Summary table..."
    [array]$dbSummaryData = $global:awrDataAll | Select-Object DBName -Unique

    for($i=0;$i -lt $dbSummaryData.Length;$i++) {
        if($i -gt 0) {$tblDBSummary.ListRows.Add() | Out-Null}
        for($j=0;$j -lt $global:dbSummaryColumnDefinitions.Length;$j++) {
            if ([string]::IsNullOrEmpty($global:dbSummaryColumnDefinitions[$j].formula))
            {
                $tblDBSummary.DataBodyRange.Item($i+1,$j+1) = $dbSummaryData[$i]."$($global:dbSummaryColumnDefinitions[$j].columnName)"
            }
        }
    }

    Write-Debug "Formatting totals row for DB Summary table..."
    for($i=1;$i -le $tblDBSummary.ListColumns.Count;$i++) {
        switch ($global:dbSummaryColumnDefinitions[$i-1].totalRow)
        {
            "sum"       {$tblDBSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationSum}
            "average"   {$tblDBSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationAverage}	
            "count"     {$tblDBSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationCount}	
            "countnums" {$tblDBSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationCountNums}
            "max"       {$tblDBSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationMax}	    
            "min"       {$tblDBSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationMin}	    
            "stddev"    {$tblDBSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationStdDev}	
            "var"       {$tblDBSummary.ListColumns($i).TotalsCalculation=  [Microsoft.Office.Interop.Excel.xlTotalsCalculation]::xlTotalsCalculationVar}            
        }

        if ( -not [string]::IsNullOrEmpty($global:dbSummaryColumnDefinitions[$i-1].format))
        {
        $tblDBSummary.DataBodyRange.Columns($i).NumberFormat = $global:dbSummaryColumnDefinitions[$i-1].format
        $tblDBSummary.TotalsRowRange.Columns($i).NumberFormat = $global:dbSummaryColumnDefinitions[$i-1].format
        }
    }

    
    Write-Debug "Fetching required capacity from Excel."
    for($i=0;$i -lt $global:dbSummaryColumnDefinitions.Length; $i++)
    {
        [decimal]$tempd=0
        if ($global:dbSummaryColumnDefinitions[$i].columnName -like "EstimatedvCPU*" )
        {
            if([decimal]::TryParse($tblDBSummary.TotalsRowRange.Item(1,$i+1).Value() ,[ref]$tempd))
            {
                $estimatedvCPU=$tempd
            }
            else
            {
                $estimatedvCPU=0
            }
        }
        elseif ($global:dbSummaryColumnDefinitions[$i].columnName -like "EstimatedRAM*" )
        {
            if([decimal]::TryParse($tblDBSummary.TotalsRowRange.Item(1,$i+1).Value() ,[ref]$tempd))
            {
                $estimatedRAM=$tempd
            }
            else
            {
                $estimatedRAM=0
            }
        }
        elseif ($global:dbSummaryColumnDefinitions[$i].columnName -like "EstimatedIOPS*" )
        {
            if([decimal]::TryParse($tblDBSummary.TotalsRowRange.Item(1,$i+1).Value() ,[ref]$tempd))
            {
                $estimatedIOPS=$tempd
            }
            else
            {
                $estimatedIOPS=0
            }
        }
        elseif ($global:dbSummaryColumnDefinitions[$i].columnName -like "EstimatedThroughput*" )
        {
            if([decimal]::TryParse($tblDBSummary.TotalsRowRange.Item(1,$i+1).Value() ,[ref]$tempd))
            {
                $estimatedIOThroughput=$tempd
            }
            else
            {
                $estimatedIOThroughput=0
            }
        }

    }
    
    GenerateRecommendations $estimatedvCPU $estimatedRAM $estimatedIOPS $estimatedIOThroughput

    if ($null -ne $global:azureVMRecommendations)
    {
        Write-Debug "Writing $($global:azureVMRecommendations.Length) recomendations to Excel."
        $VMObjectProps = $global:azureVMRecommendations[0].psobject.properties | select Name  | where {$_.Name -notlike "tmp_*" }

        $tblStartRow=$tblDBSummary.ListRows.Item($tblDBSummary.ListRows.Count).Range.Offset(3).Row # Offset 3 rows: header row+total row+empty row
        PutExcelTableHeader $wsOma $tblStartRow $tblStartCol "Recommended Azure VMs for this workload"
        $tblStartRow++
    
        Write-Debug "Creating VM recommendations table..."
        $tblVMRecommendations = $wsOma.ListObjects.Add(
            [Microsoft.Office.Interop.Excel.XlListObjectSourceType]::xlSrcRange, 
            $wsOma.Range($wsOma.cells($tblStartRow,$tblStartCol),$wsOma.cells($tblStartRow+1  ,$VMObjectProps.Length+$tblStartCol-1)), 
            $null ,
            [Microsoft.Office.Interop.Excel.XlYesNoGuess]::xlYes)

        $tblVMRecommendations.Name = "AzureVMRecommendations"
        $tblVMRecommendations.ShowHeaders = $true
        $tblVMRecommendations.ShowTotals = $false
        $tblVMRecommendations.TableStyle = "TableStyleMedium9"

        Write-Debug "Formatting headers for VM recommendations table..."
        for($i=0;$i -lt $VMObjectProps.Length;$i++) {
            $tblVMRecommendations.HeaderRowRange.Item(1,$i+1) = $VMObjectProps[$i].Name
        }

        Write-Debug "Populating VM recommendations table..."
        for($i=0;$i -lt $global:azureVMRecommendations.Length;$i++) {
            if($i -gt 0) {$tblVMRecommendations.ListRows.Add() | Out-Null}
            for($j=0;$j -lt $VMObjectProps.Length;$j++) {
                $tblVMRecommendations.DataBodyRange.Item($i+1,$j+1) = $global:azureVMRecommendations[$i]."$($VMObjectProps[$j].Name)"
            }
        }
    }
    else {
        Write-Debug "No suitable recommendations found."
        $tblStartRow=$tblDBSummary.ListRows.Item($tblDBSummary.ListRows.Count).Range.Offset(3).Row # Offset 3 rows: header row+total row+empty row
        PutExcelTableHeader $wsOma ($tblStartRow++) $tblStartCol "Combined capacity required by all databases in all AWR report provided is $estimatedvCPU vCPUs and $estimatedRAM GB of RAM." 
        PutExcelTableHeader $wsOma ($tblStartRow++) $tblStartCol "This capacity cannot be provided by a single server in the Azure region you selected ($AzureRegion)." 
        PutExcelTableHeader $wsOma ($tblStartRow++) $tblStartCol "Try splitting AWR reports into separate directories and process them separately to migrate your databases onto multiple Azure VMs." 
    }
    
}
catch [System.Runtime.InteropServices.COMException] {
    Write-Host "An Excel related error has occured."
    Write-Host ($_ | out-string)
}
catch {
    Write-Host ($_ | out-string)
}
finally
{
    Write-Debug "Saving Excel file ($global:outputExcel)..."
    $wbOma.SaveAs($global:outputExcel,51) 
    Write-Debug "Closing Excel ..."
    $wbOma.Close($false)
    $XL.Quit()
    [System.Runtime.Interopservices.Marshal]::ReleaseComObject($XL) | Out-Null
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
}
}

######################################### Init global variables #########################################
[array]$global:awrDataAll=$null
[array]$global:azureVMRecommendations=$null
$global:RACReportTitle="WORKLOAD REPOSITORY REPORT (RAC)"
$global:numProcessedFiles=0
$global:awrDataColumnDefinitions =@(
    [pscustomobject]@{columnName="InstanceIndex"        ;label="Instance Index"             ;formula=""                                                             ; multiplyBy=0          ;totalRow=""   ; format=""          ; columnWidth=20},
    [pscustomobject]@{columnName="Release"              ;label="Release#"                   ;formula=""                                                             ; multiplyBy=0          ;totalRow=""   ; format=""          ; columnWidth=20},
    [pscustomobject]@{columnName="DBName"               ;label="DB Name"                    ;formula=""                                                             ; multiplyBy=0          ;totalRow=""   ; format=""          ; columnWidth=12},
    [pscustomobject]@{columnName="InstanceName"         ;label="Instance Name"              ;formula=""                                                             ; multiplyBy=0          ;totalRow=""   ; format=""          ; columnWidth=20},
    [pscustomobject]@{columnName="HostName"             ;label="Host Name"                  ;formula=""                                                             ; multiplyBy=0          ;totalRow=""   ; format=""          ; columnWidth=20},
    [pscustomobject]@{columnName="ElapsedTime"          ;label="Elapsed Time (mins)"        ;formula=""                                                             ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="DBTime"               ;label="DB Time (mins)"             ;formula=""                                                             ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="DBCPU"                ;label="DB CPU"                     ;formula=""                                                             ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="CPUs"                 ;label="CPUs"                       ;formula=""                                                             ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="Cores"                ;label="Cores"                      ;formula=""                                                             ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="Memory"               ;label="Memory (GB)"                ;formula=""                                                             ; multiplyBy=1.0/1024.0 ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="BusyCPU"              ;label="% Busy CPU"                 ;formula=""                                                             ; multiplyBy=1.0/100    ;totalRow="sum"; format="0%"        ; columnWidth=12},
    [pscustomobject]@{columnName="SGAUse"               ;label="SGA Use (MB)"               ;formula=""                                                             ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="PGAUse"               ;label="PGA Use (MB)"               ;formula=""                                                             ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="ReadThroughput"       ;label="Read Throughput (MB/s)"     ;formula=""                                                             ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="WriteThroughput"      ;label="Write Throughput (MB/s)"    ;formula=""                                                             ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="ReadIOPS"             ;label="Read IOPS"                  ;formula=""                                                             ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="WriteIOPS"            ;label="Write IOPS"                 ;formula=""                                                             ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="TotalThroughput"      ;label="Total Throughput (MB/s)"    ;formula="=[@[Read Throughput (MB/s)]]+[@[Write Throughput (MB/s)]]"    ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="TotalIOPS"            ;label="Total IOPS"                 ;formula="=[@[Read IOPS]]+[@[Write IOPS]]"                              ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="CPUTotalCapacity"     ;label="CPU Total Capacity (sec)"   ;formula="=([@[Elapsed Time (mins)]]*60)+[@[CPUs]]"                     ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="ORAUse"               ;label="Observed Memory Use (GB)"   ;formula="=([@[SGA Use (MB)]]+[@[PGA Use (MB)]])/1024"                  ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="SourceCPUHTFactor"    ;label="Source CPU HT Factor"       ;formula="=[@[CPUs]]/[@[Cores]]"                                        ; multiplyBy=0          ;totalRow="sum"; format="#,##0"     ; columnWidth=12},
    [pscustomobject]@{columnName="AverageActiveSessions";label="Average Active Sessions"    ;formula="=[@[DB Time (mins)]]/[@[Elapsed Time (mins)]]"                ; multiplyBy=0          ;totalRow="sum"; format="0%"        ; columnWidth=12},
    [pscustomobject]@{columnName="AWRReportFileName"    ;label="AWR Report File"            ;formula=""                                                             ; multiplyBy=0          ;totalRow=""   ; format=""          ; columnWidth=0}
)

$global:instanceSummaryColumnDefinitions =@(
    [pscustomobject]@{columnName="DBName"               ;label="DB Name"                                                        ;formula=""                                                                                                                                                                                                     ; totalRow=""   ; format=""         ; columnWidth=-1},
    [pscustomobject]@{columnName="InstanceName"         ;label="Instance Name"                                                  ;formula=""                                                                                                                                                                                                     ; totalRow=""   ; format=""         ; columnWidth=-1},
    [pscustomobject]@{columnName="AverageActiveSessions";label="%DB Time of Elapsed Time (aka Avg Active Sessions or `"AAS`")"  ;formula="=IF([@[Instance Name]]=`"`",`"`",SUMIFS(AWRData[DB Time (mins)],AWRData[Instance Name],[@[Instance Name]])/SUMIFS(AWRData[Elapsed Time (mins)],AWRData[Instance Name],[@[Instance Name]]))"           ; totalRow="sum"; format="0%"       ; columnWidth=-1},
    [pscustomobject]@{columnName="ObservedMemoryUse"    ;label="Observed memory use (GB)"                                       ;formula="=IF([@[Instance Name]]=`"`",`"`",SUMIFS(AWRData[Observed Memory Use (GB)],AWRData[Instance Name],[@[Instance Name]]))"                                                                                ; totalRow="sum"; format="#,##0"    ; columnWidth=-1},
    [pscustomobject]@{columnName="ObservedIOPS"         ;label="Observed IOPS"                                                  ;formula="=IF([@[Instance Name]]=`"`",`"`",SUMIFS(AWRData[Total IOPS],AWRData[Instance Name],[@[Instance Name]]))"                                                                                              ; totalRow="sum"; format="#,##0"    ; columnWidth=-1},
    [pscustomobject]@{columnName="ObservedThroughput"   ;label="Observed Throughput (MB/s)"                                     ;formula="=IF([@[Instance Name]]=`"`",`"`",SUMIFS(AWRData[Total Throughput (MB/s)],AWRData[Instance Name],[@[Instance Name]]))"                                                                                 ; totalRow="sum"; format="#,##0"    ; columnWidth=-1},
    [pscustomobject]@{columnName="ObservedvCPUs"        ;label="Observed vCPUs"                                                 ;formula="=IF([@[Instance Name]]=`"`",`"`",[@[%DB Time of Elapsed Time (aka Avg Active Sessions or `"AAS`")]]*(vCPUHTFactor/SUMIFS(AWRData[Source CPU HT Factor],AWRData[Instance Name],[@[Instance Name]])))"  ; totalRow="sum"; format="#,##0.00" ; columnWidth=-1}
)

$global:hostSummaryColumnDefinitions =@(
    [pscustomobject]@{columnName="HostName"             ;label="Host Name"                                                      ;formula=""                                                                                                                                                                                                         ; totalRow=""   ; format=""           ; columnWidth=-1},
    [pscustomobject]@{columnName="AverageActiveSessions";label="%DB Time of Elapsed Time (aka Avg Active Sessions or `"AAS`")"  ;formula="=IF([@[Host Name]]=`"`",`"`",SUMIFS(AWRData[DB Time (mins)],AWRData[Host Name],[@[Host Name]])/SUMIFS(AWRData[Elapsed Time (mins)],AWRData[Host Name],[@[Host Name]]))"                                   ; totalRow="sum"; format="0%"         ; columnWidth=-1},
    [pscustomobject]@{columnName="ObservedMemoryUse"    ;label="Observed memory use (GB)"                                       ;formula="=IF([@[Host Name]]=`"`",`"`",SUMIFS(AWRData[Observed Memory Use (GB)],AWRData[Host Name],[@[Host Name]]))"                                                                                                ; totalRow="sum"; format="#,##0"      ; columnWidth=-1},
    [pscustomobject]@{columnName="ObservedIOPS"         ;label="Observed IOPS"                                                  ;formula="=IF([@[Host Name]]=`"`",`"`",SUMIFS(AWRData[Total IOPS],AWRData[Host Name],[@[Host Name]]))"                                                                                                              ; totalRow="sum"; format="#,##0"      ; columnWidth=-1},
    [pscustomobject]@{columnName="ObservedThroughput"   ;label="Observed Throughput (MB/s)"                                     ;formula="=IF([@[Host Name]]=`"`",`"`",SUMIFS(AWRData[Total Throughput (MB/s)],AWRData[Host Name],[@[Host Name]]))"                                                                                                 ; totalRow="sum"; format="#,##0"      ; columnWidth=-1},
    [pscustomobject]@{columnName="ObservedvCPUs"        ;label="Observed vCPUs"                                                 ;formula="=IF([@[Host Name]]=`"`",`"`",ROUND([@[%DB Time of Elapsed Time (aka Avg Active Sessions or `"AAS`")]]+0.5,0)*(vCPUHTFactor/AVERAGEIFS(AWRData[Source CPU HT Factor],AWRData[Host Name],[@Host Name])))"   ; totalRow="sum"; format="#,##0" ; columnWidth=-1}
)

$global:dbSummaryColumnDefinitions =@(
    [pscustomobject]@{columnName="DBName"                       ;label="DB Name"                                                        ;formula=""                                                                                                                                                                                                             ; totalRow=""   ; format=""     ; columnWidth=-1},
    [pscustomobject]@{columnName="AverageActiveSessions"        ;label="%DB Time of Elapsed Time (aka Avg Active Sessions or `"AAS`")"  ;formula="=IF([@[DB Name]]=`"`",`"`",SUMIFS(AWRData[DB Time (mins)],AWRData[DB Name],[@[DB Name]])/SUMIFS(AWRData[Elapsed Time (mins)],AWRData[DB Name],[@[DB Name]]))"                                                 ; totalRow="sum"; format="0%"   ; columnWidth=-1},
    [pscustomobject]@{columnName="ObservedMemoryUse"            ;label="Observed memory use (GB)"                                       ;formula="=IF([@[DB Name]]=`"`",`"`",SUMIFS(AWRData[Observed Memory Use (GB)],AWRData[DB Name],[@[DB Name]]))"                                                                                                          ; totalRow="sum"; format="#,##0"; columnWidth=-1},
    [pscustomobject]@{columnName="EstimatedRAMOnAzure"          ;label="Estimated RAM On Azure"                                         ;formula="=IF([@[DB Name]]=`"`",`"`",@[Observed Memory Use (GB)]*peakRamFactor)"                                                                                                                                        ; totalRow="sum"; format="#,##0"; columnWidth=-1},
    [pscustomobject]@{columnName="ObservedIOPS"                 ;label="Observed IOPS"                                                  ;formula="=IF([@[DB Name]]=`"`",`"`",SUMIFS(AWRData[Total IOPS],AWRData[DB Name],[@[DB Name]]))"                                                                                                                        ; totalRow="sum"; format="#,##0"; columnWidth=-1},
    [pscustomobject]@{columnName="ObservedThroughput"           ;label="Observed Throughput (MB/s)"                                     ;formula="=IF([@[DB Name]]=`"`",`"`",SUMIFS(AWRData[Total Throughput (MB/s)],AWRData[DB Name],[@[DB Name]]))"                                                                                                           ; totalRow="sum"; format="#,##0"; columnWidth=-1},
    [pscustomobject]@{columnName="EstimatedIOPSOnAzure"         ;label="Estimated IOPS On Azure for peak load"                          ;formula="=IF([@[DB Name]]=`"`",`"`",@[Observed IOPS]*peakIOFactor)"                                                                                                                                                    ; totalRow="sum"; format="#,##0"; columnWidth=-1},
    [pscustomobject]@{columnName="EstimatedThroughputOnAzure"   ;label="Estimated Throughput (MB/s) On Azure for peak load"             ;formula="=IF([@[DB Name]]=`"`",`"`",@[Observed Throughput (MB/s)]*peakIOFactor)"                                                                                                                                       ; totalRow="sum"; format="#,##0"; columnWidth=-1},
    [pscustomobject]@{columnName="ObservedAzurevCPUs"           ;label="Observed Azure vCPUs"                                           ;formula="=IF([@[DB Name]]=`"`",`"`",ROUND(SUMIFS(InstSummary[Observed vCPUs],InstSummary[DB Name],[@[DB Name]])+0.5,0))"                                                                                               ; totalRow="sum"; format="#,##0"; columnWidth=-1}
    [pscustomobject]@{columnName="EstimatedvCPUsOnAzure"        ;label="Estimated vCPUs On Azure for peak load"                         ;formula="=IF([@[DB Name]]=`"`",`"`",IF(SUMIFS(AWRData[% Busy CPU],AWRData[DB Name],[@[DB Name]])<busyCPUThreshold,peakCPUFactor*[@[Observed Azure vCPUs]],(busyCPUFactor*peakCPUFactor)*[@[Observed Azure vCPUs]]))"   ; totalRow="sum"; format="#,##0"; columnWidth=-1}
)



######################################### MAIN #########################################
if($Help -eq $true)
{
    Write-Host "Usage: $($MyInvocation.MyCommand.Name) [OPTIONS]"
    Write-Host "OPTIONS:"
    Write-Host "   -h, Help          : Display this screen."
    Write-Host "   -SourceFolder     : Source folder that contains AWR reports in HTML format. Default is '.' (current directory)."
    Write-Host "   -OutputFile       : Full path of the Excel file that will be created as output. Default is same name as SourceFolder directory name with XLSX extension under SourceFolder directory."
    Write-Host "   -AzureRegion      : Name of the Azure region to be used when generating Azure resource recommendations. Default is 'westus'."
    Write-Host "   -Debug            : Generates debug output."
    Write-Host ""
    Write-Host "$($MyInvocation.MyCommand.Name) -SourceFolder `"C:\Reports`" -AzureRegion `"westus`""
    Exit 0
}

if ($PSBoundParameters['Debug']) {
    $DebugPreference = 'Continue'
}

Write-Debug "Starting..."
Write-Debug "DebugPreference=$DebugPreference"


# if ($PSVersionTable.PSVersion.Major -lt 6)
# {
#     Write-Host "PowerShell version 6 upwards is required. Your version is $($PSVersionTable.PSVersion)"
#     Write-Host "Install latest LTS release from: https://aka.ms/powershell-release?tag=lts"
#     Write-Host "Exiting."
#     Exit
# }

if (-not (Test-Path $SourceFolder -PathType Container))
{
    Write-Host "Source folder not found: $SourceFolder"
    Write-Host "Exiting."
    Exit
}

$src=Get-Item $sourceFolder
$sourceFolder=$src.FullName
Write-Host "Processing files from directory : $SourceFolder"

if([string]::IsNullOrEmpty($OutputFile))
{
    $global:outputExcel="$($src.FullName)\$($src.Name).xlsx"
}
else {
    if($OutputFile -notlike "*.xlsx")
    {
        $OutputFile = "$OutputFile.xlsx"
    }
    if(-not $OutputFile.Contains("\"))
    {
        $OutputFile = "$($src.FullName)\$OutputFile"
    }
    $global:outputExcel=$OutputFile
}

if (Test-Path $global:outputExcel -PathType Leaf)
{
    if ($DebugPreference -eq "Continue")
    {
        Write-Host "Overwriting output file : `"$global:outputExcel`""
        Remove-Item -LiteralPath $global:outputExcel
    }
    else {
        Write-Host "Output file already exists : `"$global:outputExcel`""
        Write-Host "Exiting."
        Exit
    }
}

Get-ChildItem -Path $sourceFolder -File -Filter *.html | ForEach-Object {ProcessAWRReport -awrReportFileName $_.FullName}
if($global:numProcessedFiles -gt 0)
{
    ExportToExcel  | Out-Null
    Write-Host "Finished processing files from directory : `"$SourceFolder`""
    Write-Host "Results are stored in : `"$global:outputExcel`""
}
else {
    Write-Host "No AWR report files found in directory : `"$SourceFolder`""
    Write-Host "Nothing to process. Exiting."
}

